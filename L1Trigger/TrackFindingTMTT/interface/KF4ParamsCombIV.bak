///=== This is the Kalman Combinatorial Filter for 4 helix parameters track fit algorithm.
 
///=== Written by: Sioni Summers
 
#ifndef __KF4PARAMSCOMBIV__
#define __KF4PARAMSCOMBIV__
 
#include "L1Trigger/TrackFindingTMTT/interface/L1KalmanComb.h"
//#include "L1Trigger/TrackFindingTMTT/interface/Matrix.h"
#include <TMatrixD.h>
#include "L1Trigger/TrackFindingTMTT/interface/Stub.h"
#include "L1Trigger/TrackFindingTMTT/interface/L1track3D.h"

class KF4ParamsCombIV : public L1KalmanComb{
 
    public:
	enum BARREL_PAR_IDS { BP_RHOPHI, BP_Z, BP_INV2R, BP_T }; 
	enum ENDCAP_PAR_IDS { EP_RHOPHI, EP_RHO, EP_INV2RT, EP_INVT }; 
	enum BARREL_MEAS_IDS { BM_RHOPHI, BM_Z };
	enum ENDCAP_MEAS_IDS { EM_RHOPHI, EM_RHO };
    public:
        KF4ParamsCombIV(const Settings* settings, const string &fitterName );
        virtual ~KF4ParamsCombIV(){}
        std::string getParams();
 
    protected:
	virtual std::map<std::string, double> getTrackParams(const KalmanState *state )const;
	virtual std::vector<double> seedx(const L1track3D& l1track3D)const;
	virtual TMatrixD seedP(const L1track3D& l1track3D)const;
	virtual std::vector<double> d(const StubCluster* stubCluster )const;
	virtual TMatrixD H(const StubCluster* stubCluster)const;
	virtual TMatrixD F(const StubCluster* stubCluster, const KalmanState *state )const;
	virtual TMatrixD PxxModel( const KalmanState *state, const StubCluster *stubCluster, unsigned stub_itr )const; 
	virtual TMatrixD PddMeas(const StubCluster* stubCluster, const KalmanState *state )const;
	virtual void barrelToEndcap( double r, const StubCluster* stubCluster, std::vector<double> &state, TMatrixD &cov_x )const;
	virtual bool stubBelongs(const StubCluster* stubCluster, KalmanState& state, unsigned itr )const;
	virtual double validationGateCutValue( const StubCluster *stubCluster, unsigned path )const;
	virtual bool isGoodState( const KalmanState &state )const;
	virtual std::vector<double> residual(const StubCluster* stubCluster, const std::vector<double> &x )const;

    private:
	double getZ( const KalmanState *state )const;
	double getZ0( const KalmanState *state )const;
	double getZ0Variance( const KalmanState *state )const;
	double getZVariance( const KalmanState *state )const;
	void   barrelToEndcap( double r, const StubCluster *stubCluster, std::vector<double> &state )const;
};
#endif


